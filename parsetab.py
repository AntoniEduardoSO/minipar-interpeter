
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocLESS_THANGREATER_THANLESS_THAN_EQUALSGREATER_THAN_EQUALSEQUALS_EQUALSNOT_EQUALSCOMMA COMMENT C_CHANNEL DIVIDE DOT ELSE EQUALS EQUALS_EQUALS GREATER_THAN GREATER_THAN_EQUALS ID IF INPUT INT LBRACE LESS_THAN LESS_THAN_EQUALS LPAREN MINUS NOT_EQUALS OUTPUT PAR PLUS RBRACE RECEIVE RPAREN SEND SEQ STRING TIMES WHILEprograma_minipar : bloco_stmtbloco_stmt : bloco_SEQ\n                  | bloco_PAR\n                  | bloco_stmt bloco_SEQ\n                  | bloco_stmt bloco_PARbloco_SEQ : SEQ stmtsbloco_PAR : PAR stmtsbloco_IF : IF LPAREN bool RPAREN LBRACE stmts RBRACEbloco_WHILE : WHILE LPAREN bool RPAREN LBRACE stmts RBRACEbloco_INPUT : INPUT LPAREN RPARENbloco_OUTPUT : OUTPUT LPAREN output_args RPARENoutput_args : expr\n                   | output_args COMMA exprstmts : stmt\n             | stmts stmtstmt : atribuicao\n            | bloco_IF\n            | bloco_WHILE\n            | bloco_INPUT\n            | bloco_OUTPUT\n            | c_channel\n            | c_channel_stmtatribuicao : ID EQUALS expr\n                  | ID EQUALS STRING\n                  | ID EQUALS bloco_INPUT\n                  | ID EQUALS receive_stmtexpr : INT\n            | STRING\n            | expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr LESS_THAN expr\n            | expr GREATER_THAN expr\n            | expr LESS_THAN_EQUALS expr\n            | expr GREATER_THAN_EQUALS expr\n            | expr EQUALS_EQUALS expr\n            | expr NOT_EQUALS expr\n            expr : IDbool : exprcomment : COMMENTc_channel : C_CHANNEL ID LPAREN STRING COMMA STRING RPARENc_channel_stmt : send_stmt\n                      | receive_stmtsend_stmt : ID DOT SEND LPAREN args RPARENreceive_stmt : ID DOT RECEIVE LPAREN args RPARENargs : expr\n            | args COMMA expr'
    
_lr_action_items = {'SEQ':([0,2,3,4,7,8,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,87,89,94,95,96,],[5,5,-2,-3,-4,-5,-6,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,-7,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-45,-46,-8,-9,-42,]),'PAR':([0,2,3,4,7,8,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,87,89,94,95,96,],[6,6,-2,-3,-4,-5,-6,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,-7,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-45,-46,-8,-9,-42,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,87,89,94,95,96,],[0,-1,-2,-3,-4,-5,-6,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,-7,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-45,-46,-8,-9,-42,]),'ID':([5,6,9,10,11,12,13,14,15,16,17,19,24,25,26,27,28,30,31,33,35,36,37,38,39,40,45,46,48,53,54,55,56,57,58,59,60,61,62,63,64,67,68,70,71,72,73,74,75,76,77,78,79,83,84,87,88,89,90,91,94,95,96,],[18,18,18,-14,-16,-17,-18,-19,-20,-21,-22,-44,34,-43,18,-15,35,46,46,46,-39,-23,-24,-25,-26,-27,-28,-39,-10,46,46,46,46,46,46,46,46,46,46,46,46,-11,46,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,18,18,-45,46,-46,18,18,-8,-9,-42,]),'IF':([5,6,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,83,84,87,89,90,91,94,95,96,],[20,20,20,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,20,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,20,20,-45,-46,20,20,-8,-9,-42,]),'WHILE':([5,6,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,83,84,87,89,90,91,94,95,96,],[21,21,21,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,21,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,21,21,-45,-46,21,21,-8,-9,-42,]),'INPUT':([5,6,9,10,11,12,13,14,15,16,17,19,25,26,27,28,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,83,84,87,89,90,91,94,95,96,],[22,22,22,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,22,-15,22,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,22,22,-45,-46,22,22,-8,-9,-42,]),'OUTPUT':([5,6,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,83,84,87,89,90,91,94,95,96,],[23,23,23,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,23,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,23,23,-45,-46,23,23,-8,-9,-42,]),'C_CHANNEL':([5,6,9,10,11,12,13,14,15,16,17,19,25,26,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,83,84,87,89,90,91,94,95,96,],[24,24,24,-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,24,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,24,24,-45,-46,24,24,-8,-9,-42,]),'RBRACE':([10,11,12,13,14,15,16,17,19,25,27,35,36,37,38,39,40,45,46,48,67,70,71,72,73,74,75,76,77,78,79,87,89,90,91,94,95,96,],[-14,-16,-17,-18,-19,-20,-21,-22,-44,-43,-15,-39,-23,-24,-25,-26,-27,-28,-39,-10,-11,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-45,-46,94,95,-8,-9,-42,]),'EQUALS':([18,],[28,]),'DOT':([18,35,],[29,52,]),'LPAREN':([20,21,22,23,34,41,42,],[30,31,32,33,51,63,64,]),'STRING':([28,30,31,33,51,53,54,55,56,57,58,59,60,61,62,63,64,68,86,88,],[37,45,45,45,69,45,45,45,45,45,45,45,45,45,45,45,45,45,92,45,]),'INT':([28,30,31,33,53,54,55,56,57,58,59,60,61,62,63,64,68,88,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'SEND':([29,],[41,]),'RECEIVE':([29,52,],[42,42,]),'RPAREN':([32,40,43,44,45,46,47,49,50,70,71,72,73,74,75,76,77,78,79,80,81,82,85,92,93,],[48,-27,65,-40,-28,-39,66,67,-12,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,87,-47,89,-13,96,-48,]),'PLUS':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,53,-28,-27,53,-28,-39,53,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,53,53,53,]),'MINUS':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,54,-28,-27,54,-28,-39,54,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,54,54,54,]),'TIMES':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,55,-28,-27,55,-28,-39,55,55,55,-31,-32,-33,-34,-35,-36,-37,-38,55,55,55,]),'DIVIDE':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,56,-28,-27,56,-28,-39,56,56,56,-31,-32,-33,-34,-35,-36,-37,-38,56,56,56,]),'LESS_THAN':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,57,-28,-27,57,-28,-39,57,57,57,57,57,None,None,None,None,None,None,57,57,57,]),'GREATER_THAN':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,58,-28,-27,58,-28,-39,58,58,58,58,58,None,None,None,None,None,None,58,58,58,]),'LESS_THAN_EQUALS':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,59,-28,-27,59,-28,-39,59,59,59,59,59,None,None,None,None,None,None,59,59,59,]),'GREATER_THAN_EQUALS':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,60,-28,-27,60,-28,-39,60,60,60,60,60,None,None,None,None,None,None,60,60,60,]),'EQUALS_EQUALS':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,61,-28,-27,61,-28,-39,61,61,61,61,61,None,None,None,None,None,None,61,61,61,]),'NOT_EQUALS':([35,36,37,40,44,45,46,50,70,71,72,73,74,75,76,77,78,79,81,85,93,],[-39,62,-28,-27,62,-28,-39,62,62,62,62,62,None,None,None,None,None,None,62,62,62,]),'COMMA':([40,45,46,49,50,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,93,],[-27,-28,-39,68,-12,86,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,88,-47,88,-13,-48,]),'LBRACE':([65,66,],[83,84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa_minipar':([0,],[1,]),'bloco_stmt':([0,],[2,]),'bloco_SEQ':([0,2,],[3,7,]),'bloco_PAR':([0,2,],[4,8,]),'stmts':([5,6,83,84,],[9,26,90,91,]),'stmt':([5,6,9,26,83,84,90,91,],[10,10,27,27,10,10,27,27,]),'atribuicao':([5,6,9,26,83,84,90,91,],[11,11,11,11,11,11,11,11,]),'bloco_IF':([5,6,9,26,83,84,90,91,],[12,12,12,12,12,12,12,12,]),'bloco_WHILE':([5,6,9,26,83,84,90,91,],[13,13,13,13,13,13,13,13,]),'bloco_INPUT':([5,6,9,26,28,83,84,90,91,],[14,14,14,14,38,14,14,14,14,]),'bloco_OUTPUT':([5,6,9,26,83,84,90,91,],[15,15,15,15,15,15,15,15,]),'c_channel':([5,6,9,26,83,84,90,91,],[16,16,16,16,16,16,16,16,]),'c_channel_stmt':([5,6,9,26,83,84,90,91,],[17,17,17,17,17,17,17,17,]),'receive_stmt':([5,6,9,26,28,83,84,90,91,],[19,19,19,19,39,19,19,19,19,]),'send_stmt':([5,6,9,26,83,84,90,91,],[25,25,25,25,25,25,25,25,]),'expr':([28,30,31,33,53,54,55,56,57,58,59,60,61,62,63,64,68,88,],[36,44,44,50,70,71,72,73,74,75,76,77,78,79,81,81,85,93,]),'bool':([30,31,],[43,47,]),'output_args':([33,],[49,]),'args':([63,64,],[80,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa_minipar","S'",1,None,None,None),
  ('programa_minipar -> bloco_stmt','programa_minipar',1,'p_programa_minipar','syntax_analyzer.py',18),
  ('bloco_stmt -> bloco_SEQ','bloco_stmt',1,'p_bloco_stmt','syntax_analyzer.py',22),
  ('bloco_stmt -> bloco_PAR','bloco_stmt',1,'p_bloco_stmt','syntax_analyzer.py',23),
  ('bloco_stmt -> bloco_stmt bloco_SEQ','bloco_stmt',2,'p_bloco_stmt','syntax_analyzer.py',24),
  ('bloco_stmt -> bloco_stmt bloco_PAR','bloco_stmt',2,'p_bloco_stmt','syntax_analyzer.py',25),
  ('bloco_SEQ -> SEQ stmts','bloco_SEQ',2,'p_bloco_SEQ','syntax_analyzer.py',32),
  ('bloco_PAR -> PAR stmts','bloco_PAR',2,'p_bloco_PAR','syntax_analyzer.py',36),
  ('bloco_IF -> IF LPAREN bool RPAREN LBRACE stmts RBRACE','bloco_IF',7,'p_bloco_IF','syntax_analyzer.py',40),
  ('bloco_WHILE -> WHILE LPAREN bool RPAREN LBRACE stmts RBRACE','bloco_WHILE',7,'p_bloco_WHILE','syntax_analyzer.py',44),
  ('bloco_INPUT -> INPUT LPAREN RPAREN','bloco_INPUT',3,'p_bloco_INPUT','syntax_analyzer.py',48),
  ('bloco_OUTPUT -> OUTPUT LPAREN output_args RPAREN','bloco_OUTPUT',4,'p_bloco_OUTPUT','syntax_analyzer.py',52),
  ('output_args -> expr','output_args',1,'p_output_args','syntax_analyzer.py',56),
  ('output_args -> output_args COMMA expr','output_args',3,'p_output_args','syntax_analyzer.py',57),
  ('stmts -> stmt','stmts',1,'p_stmts','syntax_analyzer.py',64),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','syntax_analyzer.py',65),
  ('stmt -> atribuicao','stmt',1,'p_stmt','syntax_analyzer.py',72),
  ('stmt -> bloco_IF','stmt',1,'p_stmt','syntax_analyzer.py',73),
  ('stmt -> bloco_WHILE','stmt',1,'p_stmt','syntax_analyzer.py',74),
  ('stmt -> bloco_INPUT','stmt',1,'p_stmt','syntax_analyzer.py',75),
  ('stmt -> bloco_OUTPUT','stmt',1,'p_stmt','syntax_analyzer.py',76),
  ('stmt -> c_channel','stmt',1,'p_stmt','syntax_analyzer.py',77),
  ('stmt -> c_channel_stmt','stmt',1,'p_stmt','syntax_analyzer.py',78),
  ('atribuicao -> ID EQUALS expr','atribuicao',3,'p_atribuicao','syntax_analyzer.py',82),
  ('atribuicao -> ID EQUALS STRING','atribuicao',3,'p_atribuicao','syntax_analyzer.py',83),
  ('atribuicao -> ID EQUALS bloco_INPUT','atribuicao',3,'p_atribuicao','syntax_analyzer.py',84),
  ('atribuicao -> ID EQUALS receive_stmt','atribuicao',3,'p_atribuicao','syntax_analyzer.py',85),
  ('expr -> INT','expr',1,'p_expr','syntax_analyzer.py',90),
  ('expr -> STRING','expr',1,'p_expr','syntax_analyzer.py',91),
  ('expr -> expr PLUS expr','expr',3,'p_expr','syntax_analyzer.py',92),
  ('expr -> expr MINUS expr','expr',3,'p_expr','syntax_analyzer.py',93),
  ('expr -> expr TIMES expr','expr',3,'p_expr','syntax_analyzer.py',94),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','syntax_analyzer.py',95),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','syntax_analyzer.py',96),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr','syntax_analyzer.py',97),
  ('expr -> expr LESS_THAN_EQUALS expr','expr',3,'p_expr','syntax_analyzer.py',98),
  ('expr -> expr GREATER_THAN_EQUALS expr','expr',3,'p_expr','syntax_analyzer.py',99),
  ('expr -> expr EQUALS_EQUALS expr','expr',3,'p_expr','syntax_analyzer.py',100),
  ('expr -> expr NOT_EQUALS expr','expr',3,'p_expr','syntax_analyzer.py',101),
  ('expr -> ID','expr',1,'p_expr_id','syntax_analyzer.py',109),
  ('bool -> expr','bool',1,'p_bool','syntax_analyzer.py',113),
  ('comment -> COMMENT','comment',1,'p_comment','syntax_analyzer.py',117),
  ('c_channel -> C_CHANNEL ID LPAREN STRING COMMA STRING RPAREN','c_channel',7,'p_c_channel','syntax_analyzer.py',121),
  ('c_channel_stmt -> send_stmt','c_channel_stmt',1,'p_c_channel_stmt','syntax_analyzer.py',125),
  ('c_channel_stmt -> receive_stmt','c_channel_stmt',1,'p_c_channel_stmt','syntax_analyzer.py',126),
  ('send_stmt -> ID DOT SEND LPAREN args RPAREN','send_stmt',6,'p_send_stmt','syntax_analyzer.py',130),
  ('receive_stmt -> ID DOT RECEIVE LPAREN args RPAREN','receive_stmt',6,'p_receive_stmt','syntax_analyzer.py',134),
  ('args -> expr','args',1,'p_args','syntax_analyzer.py',138),
  ('args -> args COMMA expr','args',3,'p_args','syntax_analyzer.py',139),
]
